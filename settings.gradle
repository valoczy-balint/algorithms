rootProject.name = 'algorithms'

include('graph')
include('tree')

include('heap')
include("avl")

include('dijkstra')
include('bfs')
include('dfs')

include 'dynamic-programming:staircase'
findProject(':dynamic-programming:staircase')?.name = 'staircase'
include 'dynamic-programming:integerBreak'
findProject(':dynamic-programming:integerBreak')?.name = 'integerBreak'
include 'dynamic-programming:kattis'
findProject(':dynamic-programming:kattis')?.name = 'kattis'
include 'findFirstRepeatingCharacter'
include 'dynamic-programming:kadane'
findProject(':dynamic-programming:kadane')?.name = 'kadane'

include 'sort:merge-sort'
findProject(':sort:merge-sort')?.name = 'merge-sort'
include 'sort:quick-sort'
findProject(':sort:quick-sort')?.name = 'quick-sort'
include 'sort:bubble-sort'
findProject(':sort:bubble-sort')?.name = 'bubble-sort'
include 'sort:select-sort'
findProject(':sort:select-sort')?.name = 'select-sort'
include 'sort:insert-sort'
findProject(':sort:insert-sort')?.name = 'insert-sort'
include 'sort:heap-sort'
findProject(':sort:heap-sort')?.name = 'heap-sort'
include 'challenges:integerPalindrome'
findProject(':challenges:integerPalindrome')?.name = 'integerPalindrome'
include 'challenges:linkedListPalindrome'
findProject(':challenges:linkedListPalindrome')?.name = 'linkedListPalindrome'
include 'challenges:lowestCommonAncestorInBST'
findProject(':challenges:lowestCommonAncestorInBST')?.name = 'lowestCommonAncestorInBST'
include 'challenges:lowestCommonAncestorInBinaryTree'
findProject(':challenges:lowestCommonAncestorInBinaryTree')?.name = 'lowestCommonAncestorInBinaryTree'
include 'challenges:productOfArrayExceptSelf'
findProject(':challenges:productOfArrayExceptSelf')?.name = 'productOfArrayExceptSelf'
include 'challenges:slidingWindowMaximum'
findProject(':challenges:slidingWindowMaximum')?.name = 'slidingWindowMaximum'
include 'challenges:networkDelayTime'
findProject(':challenges:networkDelayTime')?.name = 'networkDelayTime'
include 'challenges:dijkstra:pathWithMaximumProbability'
findProject(':challenges:dijkstra:pathWithMaximumProbability')?.name = 'pathWithMaximumProbability'
include 'challenges:bfs:shortestReach'
findProject(':challenges:bfs:shortestReach')?.name = 'shortestReach'
include 'challenges:trappingRainWater'
findProject(':challenges:trappingRainWater')?.name = 'trappingRainWater'
include 'challenges:balancedBrackets'
findProject(':challenges:balancedBrackets')?.name = 'balancedBrackets'
include 'challenges:contacts'
findProject(':challenges:contacts')?.name = 'contacts'
include 'challenges:runningMedian'
findProject(':challenges:runningMedian')?.name = 'runningMedian'
include 'challenges:unionFind:numberOfConnectedComponentsInAnUndirectedGraph'
findProject(':challenges:unionFind:numberOfConnectedComponentsInAnUndirectedGraph')?.name = 'numberOfConnectedComponentsInAnUndirectedGraph'
include 'challenges:unionFind:numberOfProvinces'
findProject(':challenges:unionFind:numberOfProvinces')?.name = 'numberOfProvinces'
include 'challenges:swapNodes'
findProject(':challenges:swapNodes')?.name = 'swapNodes'
include 'challenges:topologicalOrder:alienDictionary'
findProject(':challenges:topologicalOrder:alienDictionary')?.name = 'alienDictionary'

